# Find appropriate base image
FROM nvidia/cuda:8.0-cudnn5-devel

MAINTAINER Sangheum Hwang <sangheum.hwang@gmail.com>

# ENV for versions
ENV BAZEL_VERSION 0.4.4
ENV TF_VERSION r1.0

# Install system packages you need
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
	    python-dev \
	    python-pip \
        tmux \
        vim \
	    rsync \
        software-properties-common \
        swig \
        unzip \
        zip \
        zlib1g-dev \
        wget \
        google-perftools \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install python packages via pip
RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

RUN pip --no-cache-dir install \
        ipykernel \
        matplotlib \
        numpy \
        scipy \
        scikit-image \
	    pandas \
        sklearn \
        && \
    python -m ipykernel.kernelspec

# Set up our notebook config.
#COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly:
#   https://github.com/ipython/ipython/issues/7062
# We just add a little wrapper script.
#COPY run_jupyter.sh /

# setup bazel
RUN add-apt-repository -y ppa:openjdk-r/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends openjdk-8-jdk openjdk-8-jre-headless && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/root/.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/root/.bazelrc
ENV BAZELRC /root/.bazelrc
# Install the most recent bazel release.
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Download Tensorflow
RUN git clone https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git checkout $TF_VERSION
WORKDIR /tensorflow

# Configure the build for our CUDA configuration.
ENV CI_BUILD_PYTHON python
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_NEED_CUDA 1
ENV TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,5.2,6.0,6.1

# Build and install Tensorflow
# NOTE: SSE, AVX, FMA are available for only Intel CPUs.
RUN tensorflow/tools/ci_build/builds/configured GPU \
#    bazel build --linkopt='-lrt' -c opt --config=cuda --copt=-mavx --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mavx2 --copt=-mfma -k //tensorflow/tools/pip_package:build_pip_package && \
    bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mfpmath=both --copt=-msse4.2 --config=cuda -k //tensorflow/tools/pip_package:build_pip_package && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \
    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \
    rm -rf /tmp/pip && \
    rm -rf /root/.cache
# Clean up pip wheel and Bazel cache when done.

# Set up TCMalloc
#RUN wget http://ftp.cn.debian.org/debian/pool/main/g/google-perftools/google-perftools_2.2.1-0.2_all.deb && \
#    wget http://ftp.cn.debian.org/debian/pool/main/g/google-perftools/libgoogle-perftools4_2.2.1-0.2_amd64.deb && \
#    wget http://ftp.cn.debian.org/debian/pool/main/g/google-perftools/libtcmalloc-minimal4_2.2.1-0.2_amd64.deb && \
#    wget http://ftp.cn.debian.org/debian/pool/main/libu/libunwind/libunwind8_1.1-4.1_amd64.deb && \
#    dpkg -i libunwind8_1.1-4.1_amd64.deb && \
#    dpkg -i libtcmalloc-minimal4_2.2.1-0.2_amd64.deb && \
#    dpkg -i libgoogle-perftools4_2.2.1-0.2_amd64.deb && \
#    dpkg -i google-perftools_2.2.1-0.2_all.deb && \
#    rm -f libunwind8_1.1-4.1_amd64.deb && \
#    rm -f libtcmalloc-minimal4_2.2.1-0.2_amd64.deb && \
#    rm -f libgoogle-perftools4_2.2.1-0.2_amd64.deb && \
#    rm -f google-perftools_2.2.1-0.2_all.deb && \
#    cd /usr/lib && ln -s libtcmalloc.so.4 libtcmalloc.so && \
#    ldconfig
RUN cd /usr/lib && ln -s libtcmalloc.so.4 libtcmalloc.so && ldconfig
ENV LD_PRELOAD /usr/lib/libtcmalloc.so

WORKDIR /root

# TensorBoard
EXPOSE 6006

RUN ["/bin/bash"]

